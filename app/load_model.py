import torch
import torch.nn as nn
import cv2
import numpy as np

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

class BoundingBoxModel(nn.Module):
    def __init__(self):
        super(BoundingBoxModel, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Dropout(0.2),  # üî• Dropout 20%

            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Dropout(0.3),  # üî• Dropout 30%

            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Dropout(0.4),  # üî• Dropout 40%
        )
        self.fc = nn.Sequential(
            nn.Linear(128 * 28 * 28, 128),
            nn.ReLU(),
            nn.Dropout(0.5),  # üî• Dropout 50%
            nn.Linear(128, 4)
        )

    def forward(self, x):
        x = self.conv(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÑ‡∏ß‡πâ
model = BoundingBoxModel().to(device)
model.load_state_dict(torch.load("C:\\Users\\ASUS\\Downloads\\best_model.pth", map_location=device))
model.eval()



# üìå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
cap = cv2.VideoCapture("C:\\Users\\ASUS\\Desktop\\lpr1.mp4")  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ 0 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏ö
    
    # ‚úÖ Resize ‡πÅ‡∏•‡∏∞ Normalize ‡∏†‡∏≤‡∏û
    input_img = cv2.resize(frame, (224, 224))
    input_img = input_img / 255.0  # Normalize
    input_tensor = torch.tensor(input_img, dtype=torch.float32).permute(2, 0, 1).unsqueeze(0).to(device)

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    with torch.no_grad():
        bbox = model(input_tensor).cpu().numpy()[0]  # ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ (x, y, w, h) ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á [0,1]

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Bounding Box ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏£‡∏¥‡∏á
    h, w, _ = frame.shape
    x, y, bw, bh = bbox
    x, y, bw, bh = int(x * w), int(y * h), int(bw * w), int(bh * h)

    # ‚úÖ ‡∏ß‡∏≤‡∏î Bounding Box ‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
    cv2.rectangle(frame, (x, y), (x + bw, y + bh), (0, 255, 0), 2)

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    cv2.imshow("Object Detection", frame)

    # ‚úÖ ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()